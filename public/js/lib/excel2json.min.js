var W = WScript; var S = WScript.CreateObject("WScript.Shell"); var F = WScript.CreateObject("Scripting.FileSystemObject"); var E = WScript.CreateObject("Excel.Application"); E.DisplayAlerts = !1; E.Visible = !0; var g_scriptFolder = W.ScriptFullName.replace(W.ScriptName, ""); var g_logFd = null; var g_popupMsg = ""; var g_localConfig = g_scriptFolder + "Excel2Json.config.js"; var g_sourceFolder = g_scriptFolder; var g_targetFolder = "output"; var g_tempSuffix = ".$$$"; var g_prettyOutput = !0; if (F.FileExists(g_localConfig)) { var fd = F.OpenTextFile(g_localConfig, 1, !1, 0); var content = fd.ReadAll(); fd.Close(); eval(content) }
var scanning = { file: "", row: 0, col: 0 }; if (typeof JSON !== 'object') { JSON = {} } (function () {
  'use strict'; function f(n) { return n < 10 ? '0' + n : n }
  if (typeof Date.prototype.toJSON !== 'function') { Date.prototype.toJSON = function (key) { return isFinite(this.valueOf()) ? this.getUTCFullYear() + '-' + f(this.getUTCMonth() + 1) + '-' + f(this.getUTCDate()) + 'T' + f(this.getUTCHours()) + ':' + f(this.getUTCMinutes()) + ':' + f(this.getUTCSeconds()) + 'Z' : null }; String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function (key) { return this.valueOf() } }
  var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, gap, indent, meta = { '\b': '\\b', '\t': '\\t', '\n': '\\n', '\f': '\\f', '\r': '\\r', '"': '\\"', '\\': '\\\\' }, rep; function quote(string) { escapable.lastIndex = 0; return escapable.test(string) ? '"' + string.replace(escapable, function (a) { var c = meta[a]; return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4) }) + '"' : '"' + string + '"' }
  function str(key, holder) {
    var i, k, v, length, mind = gap, partial, value = holder[key]; if (value && typeof value === 'object' && typeof value.toJSON === 'function') { value = value.toJSON(key) }
    if (typeof rep === 'function') { value = rep.call(holder, key, value) }
    switch (typeof value) {
      case 'string': return quote(value); case 'number': return isFinite(value) ? String(value) : 'null'; case 'boolean': case 'null': return String(value); case 'object': if (!value) { return 'null' }
        gap += indent; partial = []; if (Object.prototype.toString.apply(value) === '[object Array]') {
          length = value.length; for (i = 0; i < length; i += 1) { partial[i] = str(i, value) || 'null' }
          v = partial.length === 0 ? '[]' : gap ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' : '[' + partial.join(',') + ']'; gap = mind; return v
        }
        if (rep && typeof rep === 'object') { length = rep.length; for (i = 0; i < length; i += 1) { if (typeof rep[i] === 'string') { k = rep[i]; v = str(k, value); if (v) { partial.push(quote(k) + (gap ? ': ' : ':') + v) } } } } else { for (k in value) { if (Object.prototype.hasOwnProperty.call(value, k)) { v = str(k, value); if (v) { partial.push(quote(k) + (gap ? ': ' : ':') + v) } } } }
        v = partial.length === 0 ? '{}' : gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' : '{' + partial.join(',') + '}'; gap = mind; return v
    }
  }
  if (typeof JSON.stringify !== 'function') {
    JSON.stringify = function (value, replacer, space) {
      var i; gap = ''; indent = g_prettyOutput ? '\t' : ''; if (typeof space === 'number') { for (i = 0; i < space; i += 1) { indent += ' ' } } else if (typeof space === 'string') { indent = space }
      rep = replacer; if (replacer && typeof replacer !== 'function' && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) { throw new Error('JSON.stringify') }
      return str('', { '': value })
    }
  }
  if (typeof JSON.parse !== 'function') {
    JSON.parse = function (text, reviver) {
      var j; function walk(holder, key) {
        var k, v, value = holder[key]; if (value && typeof value === 'object') { for (k in value) { if (Object.prototype.hasOwnProperty.call(value, k)) { v = walk(value, k); if (v !== undefined) { value[k] = v } else { delete value[k] } } } }
        return reviver.call(holder, key, value)
      }
      text = String(text); cx.lastIndex = 0; if (cx.test(text)) { text = text.replace(cx, function (a) { return '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4) }) }
      if (/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@').replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) { j = eval('(' + text + ')'); return typeof reviver === 'function' ? walk({ '': j }, '') : j }
      throw new SyntaxError('JSON.parse')
    }
  }
}()); String.prototype.endsWith = function (suffix) { return this.indexOf(suffix, this.length - suffix.length) !== -1 }; function setScanningFile(csvFile) { csvFile = csvFile.replace(g_sourceFolder, ""); var sheetName = csvFile; var idx = csvFile.indexOf(g_tempSuffix); sheetName = sheetName.substring(idx + g_tempSuffix.length + 1).replace(".csv", ""); scanning.file = csvFile.substring(0, idx) + "(" + sheetName + ")" }
function logn(str) {
  if (g_logFd == null) { g_logFd = F.OpenTextFile(g_targetFolder + "ExcelJson.log", 2, !0, 0) }
  if (g_logFd) { g_logFd.Write(str) }
}
function log(str) { logn(str + "\r\n") }
function getLoc(withoutColumnInfo) {
  if (withoutColumnInfo == undefined) { return "ROW " + (scanning.row) }
  return String.fromCharCode('A'.charCodeAt(0) + scanning.col) + (scanning.row)
}
function parseLog(str, withoutColumnInfo) { var _msg; _msg = "[" + scanning.file + ": " + getLoc(withoutColumnInfo) + "]\r\n"; _msg += str + "\r\n"; logn(_msg); return _msg }
function popup(str, withoutColumnInfo, withoutScanningInfo) {
  if (withoutScanningInfo == undefined || withoutScanningInfo == !1) { var _msg = parseLog(str, withoutColumnInfo); _msg += "--\r\n" } else { var _msg = str + "\r\n" }
  g_popupMsg += _msg
}
function saveJson(excelFile, jsonString) {
  var jsonFileName = String(excelFile).replace(g_sourceFolder, "").replace(".xlsx", "").replace(".xls", "") + ".json"; var jsonPath = g_targetFolder + jsonFileName; if (!F.FolderExists(g_targetFolder)) { F.CreateFolder(g_targetFolder) }
  var A1 = WScript.CreateObject("ADODB.Stream"); A1.Charset = "utf-8"
  A1.Mode = 3; A1.Type = 2; A1.Open(); var A2 = WScript.CreateObject("ADODB.Stream"); A2.Mode = 3; A2.Type = 1; A2.Open(); A1.WriteText(jsonString, 0); A1.Position = 3; A1.CopyTo(A2); A2.SaveToFile(jsonPath, 2); A2.Close(); popup("Output: " + jsonPath, !1, !0)
}
function isExcel(filename) {
  if (filename.endsWith(".xlsx") || filename.endsWith(".xls")) { return !0 }
  return !1
}
function getExcelFiles(dir) {
  var sourceDirectory = F.GetFolder(dir); var files = new Enumerator(sourceDirectory.files); var excels = []; var msg = ""; for (; !files.atEnd(); files.moveNext()) {
    var file = files.item(); if (file.Name.substr(0, 1) == "~") { continue }
    if (isExcel(file.Path)) { excels.push(String(file.Path)) }
  }
  return excels
}
function deleteTemp(tmpdir) {
  if (!tmpdir.endsWith(g_tempSuffix)) { return }
  if (!F.FolderExists(tmpdir)) { return }
  F.DeleteFolder(tmpdir, !0)
}
function deleteTempFiles(dir) {
  var sourceDirectory = F.GetFolder(dir); var files = new Enumerator(sourceDirectory.files); var excels = []; var msg = ""; for (; !files.atEnd(); files.moveNext()) { var file = files.item(); if (file.Name.endsWith(".Identifier")) { F.DeleteFile(file.Name) } }
}
function assertTraillingOneSlash(path) {
  while (path.endsWith("\\")) { path = path.substr(0, path.length - 1) }
  path += "\\"; return path
}
function saveAsCSV(sheet, tmpdir) {
  if (!F.FolderExists(tmpdir)) { F.CreateFolder(tmpdir) }
  var csvFile = tmpdir + "\\" + sheet.Name + ".csv"; sheet.SaveAs(csvFile, 6); return csvFile
}
function getPrettyValue(value) { if (value == null) return ""; if (typeof (value) == "number") return value; if (typeof (value) == "string" && isFinite(value)) return Number(value); return String(value) }
function readCSVLine(csvLine) {
  var values = []; var value = null; var inQuote = !1; csvLine = String(csvLine); for (var i = 0; i < csvLine.length; i++) {
    var ch = csvLine.charAt(i); var chNext = ''; if (i < csvLine.length - 1) { chNext = csvLine.charAt(i + 1) }
    if (!inQuote) { switch (ch) { case ',': values.push(getPrettyValue(value)); value = ""; break; case '"': inQuote = !0; break; default: value = (value || "") + ch } } else {
      switch (ch) {
        case '"': if (chNext == '"') { value += '"'; i++ } else { inQuote = !1 }
          break; default: value = (value || "") + ch
      }
    }
  }
  if (value != null) { values.push(getPrettyValue(value)) }
  return values
}
function readCSVFile(csvFile) {
  var sheet = []; sheet.push(csvFile); log("Parsing: " + csvFile); var fd = F.OpenTextFile(csvFile, 1, !1, 0); while (!fd.AtEndOfStream) { var line = fd.ReadLine(); var values = readCSVLine(line); sheet.push(values) }
  fd.Close(); return sheet
}
function compileSimpleTable(sheet, row, keyIndex) {
  var keyCol = keyIndex["$key"]; var isArrayValue = !1; var value = {}; log("Parsing Simple Table..."); if (keyCol == undefined) { popup("$key COLUMN NOT FOUND"); return null }
  var valCol = keyIndex["$value"]; if (valCol == undefined) { valCol = keyIndex["$value[]"]; isArrayValue = !0 } else { if (keyIndex["$value[]"] != undefined) { popup("$value, $value[] BOTH FOUND, DELETE ONE PLEASE"); return null } }
  if (valCol == undefined) { popup("$value or $value[] COLUMN NOT FOUND"); return null }
  log("Using key index: " + keyCol + " value index: " + valCol); while (sheet[row] != undefined && sheet[row][keyCol] != undefined && sheet[row][keyCol]) {
    if (isArrayValue) { value[sheet[row][keyCol]] = readCSVLine(sheet[row][valCol]) } else { value[sheet[row][keyCol]] = getPrettyValue(sheet[row][valCol]) }
    row++
  }
  return value
}
function compileObjectObjectTable(sheet, row, keyIndex) {
  var keyCol = keyIndex["$key"]; var isArrayValue = !1; var value = {}; log("Parsing Object Object Table..."); if (keyCol == undefined) { popup("$key COLUMN NOT FOUND"); return null }
  log("Using key index: " + keyCol); while (sheet[row] != undefined && sheet[row][keyCol] != undefined && sheet[row][keyCol]) {
    var obj = {}; for (subkey in keyIndex) { if (subkey == "$key") continue; var valCol = keyIndex[subkey]; if (subkey.endsWith("[]")) { subkey = subkey.substr(0, subkey.length - 2); obj[subkey] = readCSVLine(sheet[row][valCol]) } else { obj[subkey] = getPrettyValue(sheet[row][valCol]) } }
    value[sheet[row][keyCol]] = obj; row++
  }
  return value
}
function compileArrayObjectTable(sheet, row, keyIndex) {
  var value = []; log("Parsing Array Object Table..."); while (sheet[row] != undefined) {
    var obj = {}; var isSane = !1; for (subkey in keyIndex) { var valCol = keyIndex[subkey]; if (subkey.endsWith("[]")) { subkey = subkey.substr(0, subkey.length - 2); obj[subkey] = readCSVLine(sheet[row][valCol]); if (obj[subkey].length > 0) { isSane = !0 } } else { obj[subkey] = getPrettyValue(sheet[row][valCol]); if (obj[subkey]) { isSane = !0 } } }
    if (!isSane) { break }
    value.push(obj); row++
  }
  return value
}
function compileObjectArrayTable(sheet, row, keyIndex) {
  var value = {}; log("Parsing Object Array Table..."); for (subkey in keyIndex) {
    var valCol = keyIndex[subkey]; var isArray = !1; if (subkey.endsWith("[]")) { isArray = !0 }
    var obj = []; var r = row; var v; while (sheet[r] instanceof Array && (v = String(sheet[r][valCol])) != "") {
      if (isArray) { subkey = subkey.substr(0, subkey.length - 2); obj.push(readCSVLine(v)) } else { obj.push(getPrettyValue(v)) }
      r++
    }
    value[subkey] = obj
  }
  return value
}
function compileSheet(sheet, rootObject) {
  var csvFile = sheet[0]; setScanningFile(csvFile); for (var row = 1; row < sheet.length; row++) {
    var line = sheet[row]; if (line == undefined) { continue }
    var anchor = line[0]; if (anchor == null) { continue }
    anchor = String(anchor); if (anchor.charAt(0) != '#') { continue }
    scanning.row = row; var objectName = ""; var objectType = ""; var keyIndex = {}; objectName = String(/#\w+/.exec(anchor)); objectType = anchor.substring(objectName.length); objectName = objectName.substring(1); log("------------------------------------------------------------------------------"); parseLog("Found object mark: '" + anchor + "'"); for (var col = 1; col < line.length; col++) { scanning.col = col; var key = line[col]; if (key.length > 0) { parseLog(" Key: " + key + " at " + col); keyIndex[key] = col } }
    var compiler = null; switch (objectType) { case "{}": compiler = compileSimpleTable; break; case "{{}}": compiler = compileObjectObjectTable; break; case "{[]}": compiler = compileObjectArrayTable; break; case "[{}]": compiler = compileArrayObjectTable; break; default: popup("Invalid object type marker: " + anchor) }
    if (compiler) { var value = compiler.call(null, sheet, row + 1, keyIndex); if (value) { rootObject[objectName] = value } }
  }
}
function compileSheetArray(sheetArray) {
  var rootObject = {}; for (var i = 0; i < sheetArray.length; i++) { compileSheet(sheetArray[i], rootObject) }
  return rootObject
}
function parseExcel(excelFile) {
  E.Workbooks.Open(excelFile, !0, !0); var tmpdir = excelFile + g_tempSuffix; var csvFiles = []; var sheetArray = []; deleteTemp(tmpdir); log("\r\nLoading: " + excelFile); try {
    for (var i = 1; i <= E.Worksheets.Count; i++) {
      var sheet = E.Worksheets.Item(i); log("Parse sheet: " + sheet.Name); if (sheet.Name.substr(0, 1) == '!') { log("Skipped, '!' prefix detected"); continue }
      var csvFile = saveAsCSV(sheet, tmpdir); setScanningFile(csvFile); csvFiles.push(csvFile); sheetArray.push(readCSVFile(csvFile, sheetArray))
    }
  } catch (e) { popup("Error: " + e.message); E.Workbooks.Close(); throw e }
  E.Workbooks.Close(); deleteTemp(tmpdir); log("Closing: " + excelFile); var rootObject = compileSheetArray(sheetArray); return JSON.stringify(rootObject).split("\n").join("\r\n")
}
try {
  g_sourceFolder = assertTraillingOneSlash(g_sourceFolder); var excels = []; objArgs = WScript.Arguments; if (objArgs.length > 0) {
    for (i = 0; i < objArgs.length; i++) { if (isExcel(objArgs(i))) { excels.push(g_sourceFolder + objArgs(i)) } }
    if (!isExcel(objArgs(objArgs.length - 1))) { g_targetFolder = objArgs(objArgs.length - 1) }
  } else { excels = getExcelFiles(g_sourceFolder) }
  if (excels.length == 0) { W.Echo("There is no excel files in\r\n" + g_sourceFolder) }
  g_targetFolder = g_sourceFolder + g_targetFolder; g_targetFolder = assertTraillingOneSlash(g_targetFolder); for (var i in excels) { var jsonString = parseExcel(excels[i]); saveJson(excels[i], jsonString) }
  deleteTempFiles(g_sourceFolder); if (g_popupMsg) { W.Echo(g_popupMsg) }
} catch (e) { E.Quit(); W.Echo(e.message); throw e; W.Quit(1) }
E.Quit(); W.Quit(0)